@model ReadNewsWebClient.Models.CrawlerConfigsViewModel

@{
    ViewBag.Title = "CreateConfig";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var listCategory = (List<ReadNewsWebClient.Models.Category>)ViewBag.ListCategory;
    var categorySelectList = new SelectList(listCategory, "Id", "Name", 1);
}

<h2>CreateConfig</h2>


<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8">


                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="card">
                        <div class="card-header card-header-primary">
                            <h4 class="card-title">Create Source Config</h4>
                            <p class="card-category">Enter source Selector</p>
                        </div>
                        <div class="card-body">
                            <div class="form-horizontal">

                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Route, htmlAttributes: new { @class = "bmd-label-floating col-md-3 " })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Route, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Route, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Path, htmlAttributes: new { @class = "bmd-label-floating col-md-3 " })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Path, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Path, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.LinkSelector, htmlAttributes: new { @class = "bmd-label-floating col-md-3 " })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.LinkSelector, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.LinkSelector, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <button type="button" id="preview-url-btn" class="btn btn-primary">Preview List Url</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    //url preview modal

                    <div id="previewUrl" class="modal fade" role="dialog" >
                        <div class="modal-dialog" >

                            <!-- Modal content-->
                            <div class="modal-content" style="width: 700px;">
                                <div class="modal-header">
                                    <h4 class="modal-title">Url preview</h4>

                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">
                                    <div id="preview-url-content">

                                    </div>
                                    
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header card-header-primary">
                            <h4 class="card-title">Create new detail config</h4>
                            <p class="card-category">Enter detail selector</p>
                        </div>
                        <div class="card-body">
                            <div class="form-horizontal">
                                <input type="hidden" id="hidden-article-link"  value="">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "bmd-label-floating col-md-3 " })
                                    <div class="col-md-10">
                                        @Html.DropDownListFor(model => model.CategoryId, categorySelectList, htmlAttributes: new { @class = "form-control" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ContentSelector, htmlAttributes: new { @class = "bmd-label-floating col-md-3 " })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ContentSelector, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ContentSelector, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.TitleSelector, htmlAttributes: new { @class = "bmd-label-floating col-md-3 " })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.TitleSelector, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.TitleSelector, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.DescriptionSelector, htmlAttributes: new { @class = "bmd-label-floating col-md-3 " })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.DescriptionSelector, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.DescriptionSelector, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.RemovalSelector, htmlAttributes: new { @class = "bmd-label-floating col-md-3 " })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.RemovalSelector, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.RemovalSelector, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <button class="btn btn-info" id="preview-article-btn" type="button">Preview Ariticle</button>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                    //article preview modal

                    <div id="article-preview" class="modal fade" role="dialog">
                        <div class="modal-dialog">

                            <!-- Modal content-->
                            <div class="modal-content" style="width: 800px;">
                                <div class="modal-header">
                                    <h4 class="modal-title">Preview Aricle</h4>

                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">
                                    <div id="article-preview-content"></div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>

</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section AdminScripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")"></script>
    <script>
        const apiEndpoints = "https://localhost:44394/api/Bot/PreviewUrlCrawler";
        const getArticleUrl = "https://localhost:44394/api/Bot/PreviewArticle";
        //static element
        const previewUrlBtn = document.getElementById("preview-url-btn");
        const previewArticleBtn = document.getElementById("preview-article-btn");

        const routeInput = document.getElementById("Route");
        const pathInput = document.getElementById("Path");
        const linkSelectorInput = document.getElementById("LinkSelector");
        let previewUrlModalContennt = document.getElementById("preview-url-content");

        const contentSelectorInput = document.getElementById("ContentSelector");
        const titleSelectorInput = document.getElementById("TitleSelector");
        const descriptionSelectorInput = document.getElementById("DescriptionSelector");
        const removalSelectorInput = document.getElementById("RemovalSelector");
        const linkHidenInput = document.getElementById("hidden-article-link");
        const previewArticleModalContent = document.getElementById("article-preview-content");
        
        //ajax function
        const getListPreviewUrl = async () => {
            const route = routeInput.value;
            const path = pathInput.value;
            const linkSelector = linkSelectorInput.value;
            const data = JSON.stringify({
                "Route": route,
                "Path": path,
                "LinkSelector": linkSelector
            });
            console.log(data);
            try {
                const response = await fetch(apiEndpoints, { method: "POST", headers: { "Content-type": "application/json" }, body: data });
                if (response.ok) {
                    const jsonResponse = await response.json();
                    console.log(jsonResponse);
                    showResult(jsonResponse);
                }
                else {
                    throw new Error("Can not connect to api");
                }
            } catch (err) {
                console.log(err);
            }
        }
        //ajax function
        const getArticle = async () => {
            const contentSelector = contentSelectorInput.value;
            const titleSelector = titleSelectorInput.value;
            const descriptionSelector = descriptionSelectorInput.value;
            const removalSelector = removalSelectorInput.value;
            const link = linkHidenInput.value;
    
  
            const data = JSON.stringify({
                "Link": link,
                "TitleSelector": titleSelector,
                "DescriptionSelector": descriptionSelector,
                "ContentSelector": contentSelector,
                "RemovalSelector": removalSelector
            });
            console.log(data);
            try {
                const response = await fetch(getArticleUrl, { method: "POST", headers: { "Content-type": "application/json" }, body: data });
                if (response.ok) {
                    const jsonResponse = await response.json();
                    console.log(jsonResponse);
                    previewArticle(jsonResponse);
                }
                else {
                    throw new Error("Can not connect to api");
                
                }
            } catch (err) {
                previewArticleModalContent.innerHTML = "<p>Can not preview article  run preview url and try again</p>"
                console.log(err);
            }
        }
        const previewArticle = res => {
            previewArticleModalContent.innerHTML = "";
            if (!res || res.length == 0) {
                previewArticleModalContent.innerHTML = "<p>Can not preview article run preview url and try again</p>"
            }
            let articleView = `<h3>${res.Title}</h3><p>${res.Description}</p><div>${res.Content}</div>`
            previewArticleModalContent.innerHTML = articleView;
        }

        const showResult = res => {
            previewUrlModalContennt.innerHTML = "";
            if (!res || res.length == 0) {
                previewUrlModalContennt.innerHTML = "<p>Can not preview any url </p>";
            }
            let tableView = "<table class ='table'><tr><th>Id</th><th>Url</th></tr>"
            for (let i = 0; i < res.length; i++) {
                tableView += `<tr><td>${i}</td><td><a href = ${res[i]} target = "_blank">${res[i]}</a></td></tr>`;
            }
            tableView += "</table>";
            previewUrlModalContennt.innerHTML = tableView;
            linkHidenInput.value = res[0];
        }

        previewUrlBtn.addEventListener("click", async e => {
            console.log("here");
            await getListPreviewUrl();
            $("#previewUrl").modal();
        })
        previewArticleBtn.addEventListener('click', async e => {
            console.log("yeet");
            await getArticle();
            $("#article-preview").modal();
        })
    </script>
}
